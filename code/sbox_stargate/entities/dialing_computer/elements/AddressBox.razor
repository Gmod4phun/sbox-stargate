@using System;
@using Sandbox;
@using Sandbox.UI;

<style>

	.frame {
		width: 100%;
		height: 100%;
		display: flex;
		flex-direction: column;
		align-items: flex-end;
		justify-content: space-between;
		row-gap: 2%;
	}

	.box_base {
		flex-grow: 1;
		width: 100%;
	}

	.box_base:nth-child(8) {
		transition: all 1s;

		&.hidden {
			flex-grow: 0;
			opacity: 0;
			transition: all 0.2s;
		}
	}

	.box_base:nth-child(9) {
		transition: all 1s;

		&.hidden {
			flex-grow: 0;
			opacity: 0;
			transition: all 0.2s;
		}
	}

	.box_number {
		position: absolute;
		color: white;
		font-family: 'Eurostile Round';
		font-size: 100%;
		align-self: center;
		left: 5%;
		bottom: 0;
		opacity: 1;

		&.num8 {
			transition: opacity 0.5s;

			&.hidden
			{
				opacity: 0;
				transition: opacity 0.2s;
			}
		}

		&.num9 {
			transition: opacity 0.5s;

			&.hidden
			{
				opacity: 0;
				transition: opacity 0.2s;
			}
		}
	}

	@@keyframes boxes_blink {
		0% {background-color: rgba(cyan, 0);}
		50% {background-color: rgba(cyan, 1);}
		100% {background-color: rgba(cyan, 0);}
	}

	.box_glyph_container {
		position: absolute;
		border-width: 2%;
		border-color: @SGCComputer.ColorSgBlue.Rgb;
		height: 100%;
		width: 75%;
		right: 0;
		justify-content: center;
		padding: 1%;

		&.blinking {
			animation-name: boxes_blink;
			animation-duration: 0.75s;
			animation-iteration-count: 1;
			animation-direction: normal;
		}
	}

	.box_glyph_image {
		background-image-tint: white;
		aspect-ratio: 1;

		&.none {
			background-image-tint: transparent;
		}
	}

</style>

<div class="frame">

	@{
		var s = $"font-size: {150 * TextScaleModifier}%";
		for (int i = 1; i <= 9; i++)
		{
			var sym = GetAddressSymbol(i-1);
			var imgclass = "box_glyph_image";
			if (sym == ' ')
			{
				imgclass += " none";
			}
			var num = GetGlyphNumber(sym);
			var imgname = $"materials/sbox_stargate/glyphs/mw/glyph_{num}.png";
			if (num == 0) imgname = "materials/sbox_stargate/glyphs/mw/glyph_1.png";

			var boxNumber = Address.Length < i ? "" : $"{i}";

			var blinkClass = $"box_glyph_container {(BoxesBlinking ? "blinking" : "")}";

			if (i == 8)
			{
				<div class="box_base hidden" @ref=box8>
					<label class="box_number" style=@s text=@boxNumber></label>
					<div class=@blinkClass>
						<image src=@imgname class=@imgclass />
					</div>
				</div>
			}
			else if (i == 9)
			{
				<div class="box_base hidden" @ref=box9>
					<label class="box_number" style=@s text=@boxNumber></label>
					<div class=@blinkClass>
						<image src=@imgname class=@imgclass />
					</div>
				</div>
			}
			else
			{
				<div class="box_base">
					<label class="box_number" style=@s text=@boxNumber></label>
					<div class=@blinkClass>
						<image src=@imgname class=@imgclass />
					</div>
				</div>
			}
		}
	}
	
</div>

@code {

	private float TextScaleModifier = 0;

	Panel box8 { get; set; } = null;
	Panel box9 { get; set; } = null;

	public string Address { get; set; } = "";

	private bool BoxesBlinking = false;

	private int GetGlyphNumber(char sym)
	{
		if (sym == ' ') return 0;
		return "?0JKNTR3MBZX*H69IGPL@QFS1E4AU85OCW72YVD".IndexOf(sym) + 1;
	}

	private char GetAddressSymbol(int pos)
	{
		if (pos >= Address.Length) return ' ';
		return Address[pos];
	}

	public async void BlinkBoxes()
	{
		BoxesBlinking = true;
		await GameTask.DelaySeconds(0.75f);
		BoxesBlinking = false;
	}

	private async void AnimateBox89(bool enable, bool b9)
	{
		(b9 ? box9 : box8).SetClass("hidden", !enable);
	}

	public void Box8_Appear()
	{
		AnimateBox89(true, false);
	}

	public void Box8_Disappear()
	{
		AnimateBox89(false, false);
	}

	public void Box9_Appear()
	{
		AnimateBox89(true, true);
	}

	public void Box9_Disappear()
	{
		AnimateBox89(false, true);
	}

	protected override void OnAfterTreeRender(bool firstTime)
	{
		float h = (this as Panel).Box.Rect.Height;
		TextScaleModifier = h / 2048.0f;
	}

	protected override int BuildHash()
	{
		//Log.Info(Address);
		return HashCode.Combine(Time.Now);
	}

}
