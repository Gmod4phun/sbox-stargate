@using System;
@using System.Collections.Generic;
@using System.Linq;
@using Sandbox;
@using Sandbox.UI;
@using Sandbox.UI.Tests;

<style>

	.frame {
		width: 100%;
		height: 100%;
		border-color: @SGCComputer.ColorSgBlue.Rgb;
		border-width: 1%;
	}

	.text_rows_container {
		height: 100%;
		width: 100%;
		margin-right: 3%;
		display: flex;
		flex-direction: column;
	}

	.text_row {
		width: 100%;
		flex-grow: 1;
		color: @SGCComputer.ColorSgBlue.Rgb;
		text-align: right;
		font-family: 'Eurostile Round';
	}

</style>

<root class="frame">

	<div class="text_rows_container" @ref=textContainer>
		@{
			for (int i = 0; i < 13; i++)
			{
				var textStyle = $"font-size: {120 * TextScaleModifier}%";
				<label class="text_row" style=@textStyle></label>
			}
		}
	</div>

</root>

@code {

	private float TextScaleModifier = 0;

	private Panel textContainer = null;
	private List<string> ScrollingTexts = new() {};
	private int maxTexts = 13;
	private TimeSince lastRefresh = 0;

	public bool Generating = false;
	private Random rnd = new Random();

	private void PushTextRow(string text)
	{
		ScrollingTexts.Insert(0, text);
	}

	private void PopTextRow()
	{
		ScrollingTexts.RemoveAt(ScrollingTexts.Count() - 1);
	}

	private void ProcessTextRows()
	{
		if (lastRefresh < 0.1)
			return;

		if (ScrollingTexts.Count() == maxTexts)
			PopTextRow();

		if (Generating)
		{
			var len = rnd.Next(6, 16); // 6-15 digit long sequences
			if (rnd.Next(0, 10) == 0) // insert a blank line sometimes
				len = 0;
			PushTextRow(rnd.NextInt64().ToString().Substring(0, len));
		}
		else
			PushTextRow("");

		var textRows = textContainer.ChildrenOfType<Label>();
		for (int i = 0; i < textRows.Count(); i++)
		{
			var textRow = textRows.ElementAt(i);
			var text = i < ScrollingTexts.Count ? ScrollingTexts[i] : "";
			textRow.Text = text;
		}

		lastRefresh = 0;
	}

	protected override void OnAfterTreeRender(bool firstTime)
	{
		float h = (this as Panel).Box.Rect.Height;
		TextScaleModifier = h / 2048.0f;

		ProcessTextRows();
	}

	protected override int BuildHash()
	{
		return HashCode.Combine(Time.Now);
	}

}
