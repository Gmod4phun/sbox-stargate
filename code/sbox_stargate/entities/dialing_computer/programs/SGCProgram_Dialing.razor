@using System;
@using Sandbox;
@using Sandbox.UI;
@using System.Threading.Tasks;
@using System.Text;

@inherits SGCProgram;

<style>

	.black_bg {
		background-color: black;
		width: 100%;
		height: 65%;
		margin: auto;
	}

	.frame_outer {
		border-width: 0.5%;
		border-color: @SGCComputer.ColorSgBlue.Rgb;

		position: absolute;
		top: 19.15%;
		bottom: 19.15%;
		left: 1.65%;
		right: 1.65%;
		margin: auto;
	}

	.frame_numberbox {
		position: absolute;
		top: 20.5%;
		bottom: 46.75%;
		left: 3%;
		right: 81.1%;
		margin: auto;
	}

	.frame_octagonbox {
		position: absolute;
		top: 53.8%;
		bottom: 30.35%;
		left: 3%;
		right: 81.1%;
		margin: auto;
	}

	.frame_gradientbox {
		position: absolute;
		top: 70.2%;
		bottom: 20.5%;
		left: 3%;
		right: 66.7%;
		margin: auto;
	}

	.frame_gridbox {
		position: absolute;
		top: 70.2%;
		bottom: 20.5%;
		left: 33.7%;
		right: 53.7%;
	}

	.frame_statusbox {
		position: absolute;
		top: 70.2%;
		bottom: 20.5%;
		left: 47%;
		right: 19.4%;
	}

	.frame_gatebox {
		position: absolute;
		top: 20.5%;
		bottom: 30.35%;
		left: 19.4%;
		right: 19.4%;
		margin: auto;
	}

	.frame_addressbox {
		position: absolute;
		top: 20.5%;
		bottom: 20.75%;
		left: 81.1%;
		right: 3%;
		margin: auto;
	}

	.glyph_encode_frame {
		position: absolute;
		border-width: 0.5%;
		border-color: white;
		background-color: transparent;
		justify-content: center;
		z-index: 11;

		<!--Transition params-->
		transition: top 0.6s, left 0.6s, width 0.6s, height 0.6s;

		<!--Default pos, hidden-->
		top: 24.5%;
		left: 50%;
		width: 0%;
		height: 0%;
		opacity: 0;

		<!--Centered pos, appeared-->
		&.appear {
			top: 20.6%;
			left: 19.45%;
			width: 61.1%;
			height: 48.95%;
			opacity: 1;
		}

		&.move_1 {
			top: 20.65%;
			left: 85%;
			width: 12%;
			height: 8%;
			opacity: 1;
		}

		&.move_2 {
			top: 29.05%;
			left: 85%;
			width: 12%;
			height: 8%;
			opacity: 1;
		}

		&.move_3 {
			top: 37.4%;
			left: 85%;
			width: 12%;
			height: 8%;
			opacity: 1;
		}

		&.move_4 {
			top: 45.75%;
			left: 85%;
			width: 12%;
			height: 8%;
			opacity: 1;
		}

		&.move_5 {
			top: 54.15%;
			left: 85%;
			width: 12%;
			height: 8%;
			opacity: 1;
		}

		&.move_6 {
			top: 62.55%;
			left: 85%;
			width: 12%;
			height: 8%;
			opacity: 1;
		}

		&.move_7 {
			top: 70.95%;
			left: 85%;
			width: 12%;
			height: 8%;
			opacity: 1;
		}

		&.move_7_nonlast {
			top: 64.7%;
			left: 85%;
			width: 12%;
			height: 7%;
			opacity: 1;
		}

		&.move_8 {
			top: 72.05%;
			left: 85%;
			width: 12%;
			height: 7%;
			opacity: 1;
		}

		&.move_8_nonlast {
			top: 66.4%;
			left: 85%;
			width: 12%;
			height: 6.15%;
			opacity: 1;
		}

		&.move_9 {
			top: 72.95%;
			left: 85%;
			width: 12%;
			height: 6.15%;
			opacity: 1;
		}
	}

	.glyph_encode_glyph_image {
		background-image-tint: white;
		height: 100%;
		aspect-ratio: 1;
		z-index: 12;

		&.none {
			background-image-tint: transparent;
		}
	}

	.input_accepted {
		position: absolute;
		border-color: @SGCComputer.ColorSgBlue.Rgb;
		border-width: 0.5%;
		background-image: url("materials/sbox_stargate/programs/dialing/input_accepted.png");
		background-image-tint: @SGCComputer.ColorSgBlue.Rgb;
		background-size: contain;
		background-repeat: no-repeat;
		background-position: center;
		background-color: black;
		top: 31%;
		bottom: 43%;
		left: 25%;
		right: 25%;
		margin: auto;
	}

	.input_accepted_entry {
		position: absolute;
		background-image: url("materials/sbox_stargate/programs/dialing/input_accepted_entry.png");
		background-image-tint: white;
		background-size: contain;
		background-repeat: no-repeat;
		background-position: center;
		width: 100%;
		height: 100%;
	}

</style>

<root>

	<div class="black_bg"></div>

	<div class="frame_outer"></div>

	<div class="frame_numberbox">
		<NumberBox @ref=numberbox></NumberBox>
	</div>

	<div class="frame_octagonbox">
		<OctagonBox></OctagonBox>
	</div>

	<div class="frame_gradientbox">
		<GradientBox @ref=gradientbox></GradientBox>
	</div>

	<div class="frame_gridbox">
		<GridBox></GridBox>
	</div>

	<div class="frame_statusbox">
		<StatusBox @ref=statusbox></StatusBox>
	</div>

	<div class="frame_gatebox">
		<GateBox @ref=gatebox></GateBox>
	</div>

	<div class="frame_addressbox">
		<AddressBox @ref=addressbox></AddressBox>
	</div>

	<div class="glyph_encode_frame" @ref="encode_box">
	@{
		var num = GetGlyphNumber(EncodingGlyph);
		var imgname = $"materials/sbox_stargate/glyphs/mw/glyph_{num}.png";
		var c = "glyph_encode_glyph_image";
		if (num == 0)
		{
			c += " none";
			imgname = "materials/sbox_stargate/glyphs/mw/glyph_1.png";
		}
		<image src=@imgname class=@c/>
		}
	</div>

	@{
		if (Gate.IsValid() && Gate.Idle && Stargate.IsValidFullAddress(Address))
		{
			var entryStyle = $"opacity: {SGCComputer.GetSinFromTime() * 2}";
			<div class="input_accepted">
				<div class="input_accepted_entry" style=@entryStyle></div>
			</div>
		}
	}

</root>

@code
{
	GateBox gatebox;
	AddressBox addressbox;
	StatusBox statusbox;
	GradientBox gradientbox;
	NumberBox numberbox;

	Panel encode_box { get; set; } = null;

	char EncodingGlyph { get; set; } = ' ';
	public string Address { get; set; } = "";
	string Status = "hidden";

	private float TextScaleModifier = 0;

	public override void UpdateProgram(SGCMonitor monitor, SGCComputer computer)
	{
		base.UpdateProgram(monitor, computer);
		Address = Monitor.DialProgramCurrentAddress;
	}

	public override void Tick()
	{
		base.Tick();

		if (!Gate.IsValid())
		{
			Status = "disconnected";
			if (Address != "")
				Address = "";
			return;
		}

		if (Gate.Idle)
			Status = "idle";

		if (Gate.Dialing)
			Status = "progress";

		if (!Gate.Inbound && (Gate.Open || Gate.Closing))
			Status = "locked";

		if ((Gate.Dialing && Gate.IsLocked) || (!Gate.Inbound && Gate.Opening))
			Status = Gate.IsLockedInvalid ? "nolock" : "complete";

		if (Gate.Inbound)
			Status = "hidden";
	}

	protected override void OnAfterTreeRender(bool firstTime)
	{
		float h = (this as Panel).Box.Rect.Height;
		TextScaleModifier = h / 2048.0f;

		if (addressbox.IsValid())
			addressbox.Address = Address;

		if (statusbox.IsValid())
			statusbox.Status = Status;

		if (!Gate.IsValid()) return;

		if (gatebox.IsValid())
			gatebox.Gate = Gate;

		if (gradientbox.IsValid())
			gradientbox.CanAnimate = !Gate.Idle;

		if (numberbox.IsValid())
			numberbox.Generating = !Gate.Idle;
	}

	protected override int BuildHash()
	{
		return HashCode.Combine(Time.Now);
	}

	private int GetGlyphNumber(char sym)
	{
		if (sym == ' ') return 0;
		return "?0JKNTR3MBZX*H69IGPL@QFS1E4AU85OCW72YVD".IndexOf(sym) + 1;
	}

	public async void EncodeBoxAppear(char sym)
	{
		EncodingGlyph = sym;

		if (EncodingGlyph == '#')
			EncodingGlyph = '?';

		encode_box.SetClass("appear", true);
		Sound.FromWorld("sg.program.dial.chevron_encode", Computer.Position);

		await GameTask.DelaySeconds(0.6f);

		Sound.FromWorld("sg.program.dial.chevron_beep", Computer.Position);

		await GameTask.DelaySeconds(0.2f);

		var addrLen = Address.Length;
		if (EncodingGlyph != '?')
		{
			if (addrLen == 6)
				Box_89_Appear(8);
			else if (addrLen == 7)
				Box_89_Appear(9);
		}
	}

	public void EncodeBoxDisappear()
	{
		encode_box.SetClass("appear", false);
	}

	public void AddGlyphToAddress(char sym)
	{
		Address += sym;
	}

	public async void EncodeBoxMove(int num, bool last)
	{
		await GameTask.DelaySeconds(0.5f);

		if (!Gate.Dialing) return;

		var moveclass = $"move_{num}";

		if (num == 7 || num == 8)
			if (!last)
				moveclass += "_nonlast";

		EncodeBoxDisappear();
		encode_box.SetClass(moveclass, true);
		Sound.FromWorld("sg.program.dial.chevron_encode", Computer.Position);

		await GameTask.DelaySeconds(0.6f);
		Sound.FromWorld("sg.program.dial.chevron_beep", Computer.Position);

		AddGlyphToAddress(EncodingGlyph);

		encode_box.SetClass(moveclass, false);

		if (last)
		{
			await GameTask.DelaySeconds(0.25f);
			AddressBoxesBlink();
		}

		/*
		if (Gate.ActiveChevrons == 7)
			{
			//SequenceComplete = true;
			await GameTask.DelaySeconds(0.25f);

			Sound.FromWorld("sg.program.dial.lock_beep", Computer.Position);

			await GameTask.DelaySeconds(0.5f);

			Sound.FromWorld("sg.program.dial.lock_beep", Computer.Position);

			await GameTask.DelaySeconds(0.25f);
			//SequenceComplete = false;
		}
		*/

	}

	public void Box_89_Appear(int num)
	{
		if (num == 8)
		{
			addressbox.Box8_Appear();
		}
		else if (num == 9)
		{
			addressbox.Box9_Appear();
		}
	}

	public void Box_89_Disappear()
	{
		addressbox.Box8_Disappear();
		addressbox.Box9_Disappear();
	}

	public void IndicatorBlink()
	{
		gatebox.ChevronIndicatorBlink();
	}

	public async void AddressBoxesBlink()
	{
		for (int i = 0; i < 2; i++)
		{
			if (!Computer.IsValid())
				return;

			addressbox.BlinkBoxes();
			Sound.FromWorld("sg.program.dial.lock_beep", Computer.Position);

			await GameTask.DelaySeconds(0.8f);
		}
	}

	public void ReturnToIdle()
	{
		EncodeBoxDisappear();
		Box_89_Disappear();
		Address = "";
	}

}
